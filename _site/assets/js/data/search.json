[
  
  {
    "title": "[Flutter] iOS, Code Factory Ch11 동영상플레이어",
    "url": "/posts/code-factory-ch11/",
    "categories": "Development, Flutter",
    "tags": "flutter, iOS, code_factory, video_player, image_picker",
    "date": "2024-03-04 18:00:00 +0900",
    





    
    "snippet": "코드팩도리 CH11 동영상플레이어프로젝트 목적  동영상 플레이어 앱 구현  핸드폰에 저장해둔 동영상을 선택, 실행, 컨트롤하는 기능 구현사전 준비      pubspec.yaml 파일에 라이브러리 추가    // pubspec.yamldependencies:\tflutter:\tsdk: flutter\timage_picker: ^1.0.7\tvideo_pla...",
    "content": "코드팩도리 CH11 동영상플레이어프로젝트 목적  동영상 플레이어 앱 구현  핸드폰에 저장해둔 동영상을 선택, 실행, 컨트롤하는 기능 구현사전 준비      pubspec.yaml 파일에 라이브러리 추가    // pubspec.yamldependencies:\tflutter:\tsdk: flutter\timage_picker: ^1.0.7\tvideo_player: ^2.8.2              첫 번째 방법으로 pubspec.yaml 파일의 dependencies에 사용할 라이브러리를 위와 같이 추가하고 상단 우측에 Get Packages아이콘을 누르게 되면 해당 라이브러리가 받아진다.      두 번째 방법은 터미널을 켜고 flutter pub add [라이브러리명]명령어를 사용하여 받는다.      나는 보통 두 번째 방법을 통해 라이브러리를 받는데, 이게 편함.            pubspec.yaml 파일에 이미지 추가          앱에 사용할 이미지를 assets/img파일에 저장하고,      pubspec.yaml파일에 해당 경로를 알려준다.        // pubspec.yamlassets: - assets/img/            프로젝트에 사용할 동영상 시뮬레이터에 추가          iOS 시뮬레이터의 사진앱을 켠 후 사용할 동영상 파일을 드래그하여 추가            네이티브 설정          ios/Runner/Info.plist에 권한 추가        // ios/Runner/Info.plist&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE  plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;&lt;plist  version=\"1.0\"&gt;...생략\t//카메라 권한 추가\t&lt;key&gt;NSCameraUsageDescription&lt;/key&gt;\t&lt;string&gt;카메라 권한이 필요해요.&lt;/string&gt;...생략&lt;/plist&gt;        완성된 코드    main.dart    // lib/main.dartimport 'package:flutter/material.dart';import 'package:fluttertest/screens/video_player/video_player.dart';void  main() {  runApp (  MaterialApp (    home: VideoPlayer(),  ),  );}        videoPlayer.dart    // lib/screen/video_player.dartimport  'package:flutter/material.dart';import  'package:fluttertest/screens/video_player/custom_video_player.dart';import  'package:image_picker/image_picker.dart';class VideoPlayer extends StatefulWidget { const VideoPlayer({super.key});  @override  State&lt;VideoPlayer&gt; createState() =&gt; _VideoPlayerState();  }  class _VideoPlayerState extends State&lt;VideoPlayer&gt; {    XFile? video;  @override  Widget build(BuildContext context) {    return Scaffold(      backgroundColor: Colors.black,      body: video == null ? renderEmpty() : renderVideo(),      );    }Widget renderEmpty() {  return Container(    width: MediaQuery.of(context).size.width,    decoration: getBoxDecoration(),    child: Column(      mainAxisAlignment: MainAxisAlignment.center,      children: [        _Logo(          onTap: onNewVideoPressed,        ),        const  SizedBox(          height: 30,        ),         _AppName(),        ],      ),    );  }void onNewVideoPressed() async {  final video = await  ImagePicker().pickVideo(    source: ImageSource.gallery,  );  if (video != null) {    setState(() {      this.video = video;    });  }  }Widget renderVideo() {  return Center(    child: CustomVideoPlayer(    video: video!,    onNewVideoPressed: onNewVideoPressed,    ),   );  }BoxDecoration getBoxDecoration() {  return const BoxDecoration(    gradient: LinearGradient(      begin: Alignment.topCenter,      end: Alignment.bottomCenter,    colors: [      Color(0xff2a3a7c),      Color.fromARGB(255, 180, 58, 86),    ],   ), );}}class _Logo extends StatelessWidget {    final GestureTapCallback  onTap;    const _Logo({      required this.onTap,    });@override  Widget build(BuildContext context) {    return GestureDetector(      onTap: onTap,      child: Image.asset(        'assets/video_player_img/logo.png',      ),     );    }   }class _AppName extends StatelessWidget {  final  textStyle = const  TextStyle(    color: Colors.white,    fontSize: 30,    fontWeight: FontWeight.w300,  );  @override  Widget build(BuildContext context) {    return Row(      mainAxisAlignment: MainAxisAlignment.center,      children: [      Text(        'VIDEO',        style: textStyle,      ),      Text(        'PLAYER',        style: textStyle.copyWith(        fontWeight: FontWeight.w700,      ),     ),    ],   );  } }        custom_video_player.dart    // lib/screen/custom_video_player.dartimport 'dart:io';import 'package:flutter/material.dart';import 'package:fluttertest/screens/video_player/custom_icon_button.dart';import 'package:image_picker/image_picker.dart';import 'package:video_player/video_player.dart';class CustomVideoPlayer extends StatefulWidget {  final XFile video;  final GestureTapCallback onNewVideoPressed;  const CustomVideoPlayer({    super.key,    required this.video,    required this.onNewVideoPressed,  });  @override  State&lt;CustomVideoPlayer&gt; createState() =&gt; _CustomVideoPlayerState();}class _CustomVideoPlayerState extends State&lt;CustomVideoPlayer&gt; {  VideoPlayerController? videoController;  bool showControls = false;  @override  void didUpdateWidget(covariant CustomVideoPlayer oldWidget) {    super.didUpdateWidget(oldWidget);    if (oldWidget.video.path != widget.video.path) {      initializeController();    }  }  @override  void initState() {    super.initState();    initializeController();  }  initializeController() async {    final videoController = VideoPlayerController.file(      File(widget.video.path),    );    await videoController.initialize();    videoController.addListener(videoControllerListener);    setState(() {      this.videoController = videoController;    });  }  void videoControllerListener() {    setState(() {});  }  @override  void dispose() {    videoController?.removeListener(videoControllerListener);    super.dispose();  }  @override  Widget build(BuildContext context) {    if (videoController == null) {      return const Center(        child: CircularProgressIndicator(),      );    }    return GestureDetector(      onTap: () {        setState(() {          showControls = !showControls;        });      },      child: AspectRatio(        aspectRatio: videoController!.value.aspectRatio,        child: Stack(          children: [            VideoPlayer(              videoController!,            ),            if (showControls)              Container(                color: Colors.black.withOpacity(0.5),              ),            Positioned(              bottom: 0,              right: 0,              left: 0,              child: Padding(                padding: const EdgeInsets.symmetric(                  horizontal: 8,                ),                child: Row(                  children: [                    renderTimeTextFormDuration(                      videoController!.value.position,                    ),                    Expanded(                      child: Slider(                        onChanged: (double val) {                          videoController!.seekTo(                            Duration(                              seconds: val.toInt(),                            ),                          );                        },                        value: videoController!.value.position.inSeconds                            .toDouble(),                        min: 0,                        max: videoController!.value.duration.inSeconds                            .toDouble(),                      ),                    ),                    renderTimeTextFormDuration(                      videoController!.value.duration,                    ),                  ],                ),              ),            ),            if (showControls)              Align(                alignment: Alignment.topRight,                child: CustomIconButton(                  onPressed: widget.onNewVideoPressed,                  iconData: Icons.photo_camera_back,                ),              ),            if (showControls)              Align(                alignment: Alignment.center,                child: Row(                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,                  children: [                    CustomIconButton(                      onPressed: onReversePressed,                      iconData: Icons.rotate_left,                    ),                    CustomIconButton(                      onPressed: onPlayPressed,                      iconData: videoController!.value.isPlaying                          ? Icons.pause                          : Icons.play_arrow,                    ),                    CustomIconButton(                      onPressed: onForwordPressed,                      iconData: Icons.rotate_right,                    )                  ],                ),              ),          ],        ),      ),    );  }  Widget renderTimeTextFormDuration(Duration duration) {    return Text(      '${duration.inMinutes.toString().padLeft(2, '0')}:${(duration.inSeconds % 60).toString().padLeft(2, '0')}',      style: const TextStyle(        color: Colors.white,      ),    );  }  void onReversePressed() {    final currrentPosition = videoController!.value.position;    Duration position = const Duration();    if (currrentPosition.inSeconds &gt; 3) {      position = currrentPosition - const Duration(seconds: 3);    }    videoController!.seekTo(position);  }  void onForwordPressed() {    final maxPosition = videoController!.value.duration;    final currentPosition = videoController!.value.position;    Duration position = maxPosition;    if ((maxPosition - const Duration(seconds: 3)).inSeconds &gt;        currentPosition.inSeconds) {      position = currentPosition + const Duration(seconds: 3);    }    videoController!.seekTo(position);  }  void onPlayPressed() {    if (videoController!.value.isPlaying) {      videoController!.pause();    } else {      videoController!.play();    }    setState(() {});  }}        custom_icon_button.dart    import 'package:flutter/material.dart';class CustomIconButton extends StatelessWidget {final GestureTapCallback onPressed;final IconData iconData;const CustomIconButton({  super.key,  required this.onPressed,  required this.iconData,});@overrideWidget build(BuildContext context) {  return IconButton(    onPressed: onPressed,    iconSize: 30,    color: Colors.white,    icon: Icon(      iconData,    ),  );}}        앱 뷰 확인          "
  },
  
  {
    "title": "[Flutter] vsCode, Flutter 기본 세팅",
    "url": "/posts/flutter-default-setting/",
    "categories": "Development, Flutter",
    "tags": "flutter, macos, vscode, setting",
    "date": "2024-02-29 20:00:00 +0900",
    





    
    "snippet": "[vscode]Flutter 프로젝트 세팅flutter create [프로젝트명]  터미널에서 flutter create [프로젝트명]명령어로 프로젝트 만들기Extension 설치  Dart extension  Flutter extensiondart devtool, 시뮬레이터 실행  이미지 하단의 빨간 박스의 Dart devtool과 디바이스 선택 버...",
    "content": "[vscode]Flutter 프로젝트 세팅flutter create [프로젝트명]  터미널에서 flutter create [프로젝트명]명령어로 프로젝트 만들기Extension 설치  Dart extension  Flutter extensiondart devtool, 시뮬레이터 실행  이미지 하단의 빨간 박스의 Dart devtool과 디바이스 선택 버튼이 있는지 확인  디바이스 선택 버튼 클릭 시 상단의 빨간 박스가 나타나고 개발을 진행 할 디바이스 선택  Dart devtool이 안보인다면 {} Dart 버튼을 호버하면 표시줄에 추가 할 항목이 나타나고 우측 pin 모양을 눌러 선택해주면 된다.source.fixAll 활성화  vscode에서 settings.json을 열고 해당 항목 수정\"editor.codeActionsOnSave\": {\t\"source.fixAll\": true\t},      수정 시 변경 사항          부모 자식 widget의 가이드라인 생성      const 자동 삽입(const 삽입을 하지 않으면 경고가 나타남)      "
  },
  
  {
    "title": "[Github 블로그] Github 블로그 Page에 이미지 삽입",
    "url": "/posts/git-blog-added-img/",
    "categories": "Development, blog",
    "tags": "github, blog, image",
    "date": "2024-02-27 17:00:00 +0900",
    





    
    "snippet": "Github 블로그 Page에 이미지 삽입이미지 준비  사용할 이미지를 자신의 github blog 프로젝트의 폴더 중 assets 폴더 안으로 이동한다      나같은 경우 post파일 이름과 같은 이름으로 폴더를 만들어 관리 중    assets  L img\t L 2024-02-01-test\t\t\t L a.png\t\t\t L b.png\t L 2024-0...",
    "content": "Github 블로그 Page에 이미지 삽입이미지 준비  사용할 이미지를 자신의 github blog 프로젝트의 폴더 중 assets 폴더 안으로 이동한다      나같은 경우 post파일 이름과 같은 이름으로 폴더를 만들어 관리 중    assets  L img\t L 2024-02-01-test\t\t\t L a.png\t\t\t L b.png\t L 2024-02-03-test2\t\t\t L c.png\t\t\t L d.png      이미지 경로 확인      기본 마크업![img name](.././assets/img/2024-02-01-test/a.png)          기본 마크업으로 이미지를 삽입하는 경우 github에 올렸을 때 경로를 찾지 못하는 오류 발생            github에서 경로 확인 후 삽입                  깃헙 공홈에 접속 후 Issues탭으로 이동 후 New issue를 클릭                    이미지 경로 확인을 위하여 해당 이미지를 업로드                    이미지 경로를 복사하여 사용하면 끝!! 간단하네                    이미지 사이즈 설정                    사이즈 설정은 뒷부분에 중괄호를 입력 후 안쪽에 width와 height 설정                  ![img name](이미지 경로){: width='50%', height='50%'}                    "
  },
  
  {
    "title": "[Flutter] MacOs, Flutter 개발 환경 세팅",
    "url": "/posts/flutter-dev-setting/",
    "categories": "Development, Flutter",
    "tags": "flutter, macos, setting",
    "date": "2024-02-27 12:00:00 +0900",
    





    
    "snippet": "macOS, Flutter 개발 환경 세팅Flutter SDK 다운로드 및 압축 풀기  flutter 공홈 -&gt; get started 버튼 -&gt; macOS 선택 -&gt; iOS 선택 -&gt; 스크롤을 좀 내리다 보면 download and install 탭이 있는데 intel칩이면 intel prosessor를 클릭하여 다운받고(.zip...",
    "content": "macOS, Flutter 개발 환경 세팅Flutter SDK 다운로드 및 압축 풀기  flutter 공홈 -&gt; get started 버튼 -&gt; macOS 선택 -&gt; iOS 선택 -&gt; 스크롤을 좀 내리다 보면 download and install 탭이 있는데 intel칩이면 intel prosessor를 클릭하여 다운받고(.zip 파일) m1이상이면 apple silicon을 클릭하여 받으면 된다      다운된 파일을 압축해제 한 후 환경설정을 해줘야 한다          터미널을 켜고              echo &amp;SHELL 명령어를 입력하여 내가 어떤 셸을 사용하는지 확인 -&gt; /bin/bash 또는 /bin/zsh                  Bash                          vi ~/.bashrc                                            Z Shell                          vi ~/.zshrc                                          export PATH=\"$PATH:{압축을 푼 폴더 위치}/flutter/bin\" 입력      esc -&gt; : wq (저장 후 나옴)      source ~/zshrc 변경사항 적용 명령어 실행      Xcode 설치  Xcode는 애플에서 제공하는 iOS 개발 툴이며, flutter 앱을 iOS용으로 빌드하려면 Xcode가 필요      앱 스토어에 접속하여 Xcode를 설치      안드로이드 스튜디오 설치      안드로이드스튜디오 공홈 에서 IDE 설치    설치 진행 시 인텔칩과 애플 실리콘 중 선택  setting -&gt; Android SDK -&gt; SDK Tools 에서 Android SDK Command-line Tools(latest) 설치      setting -&gt; Plugins에서 flutter, dart 설치      flutter doctor 실행  터미널에 flutter doctor 명령어를 실행해보면 flutter 개발 환경에서 부족한 부분을 체크해준다  보통 여기까지 왔으면 2~3개 정도 x표시가 나타날 것이다  설치가 안 된 것은 flutter doctor가 설치 방법을 알려주니 따라서 설치하면 된다flutter 라이선스  안드로이드 스튜디오에서 라이선스 체크를 하였지만 터미널에서 한 번 더 해주어야 한다  flutter doctor --android-licenses 명령어 입력 후 동의 될 때까지 전부 Accept (y)Test  개발환경이 완료되면 test를 진행  먼저 터미널에 flutter create [프로젝트이름](예: flutter create testflutter)  vscode에서 해당 파일을 열면 flutter 프로젝트가 나타난다      lib -&gt; main.dart 를 켠다    사용할 디바이스 선택      하단의 디바이스 선택 버튼을 클릭하고 디바이스 선택        flutter run    성공!!"
  },
  
  {
    "title": "[React-query] React-query 사용예제",
    "url": "/posts/React-Query-%EC%82%AC%EC%9A%A9-%EC%98%88%EC%A0%9C/",
    "categories": "Development, Library",
    "tags": "React-query, React",
    "date": "2024-02-22 20:00:00 +0900",
    





    
    "snippet": "React-query 사용 예제기존 코드const Coins = () =&gt; {const [coins, setCoins] = useState&lt;ICoin[]&gt;([]); // 통신으로 받아온 coins data 상태관리const [loading, setLoading] = useState(true); // 통신 과정 상태관리useEffect(...",
    "content": "React-query 사용 예제기존 코드const Coins = () =&gt; {const [coins, setCoins] = useState&lt;ICoin[]&gt;([]); // 통신으로 받아온 coins data 상태관리const [loading, setLoading] = useState(true); // 통신 과정 상태관리useEffect(() =&gt; { // 화면 mount 시 해당 함수 실행(async () =&gt; {const res = await fetch(\"httpspi.coinpaprika.com/v1/coins\"); // data 요청const data = await res.json();setCoins(data.slice(0, 100)); // api 요청으로 받아온 data 상태 업데이트setLoading(false); // 상태 업데이트 후 통신 과정 업데이트})();}, []);&lt;Container&gt;&lt;Header&gt;  &lt;Title&gt;코인&lt;/Title&gt;&lt;/Header&gt;// loading의 boolean 값을 보고 화면 rander 결정  {loading ? (  &lt;Loader&gt;loading...&lt;/Loader&gt;  ) : (    &lt;CoinList&gt;    // 받아온 data를 뿌려주는 과정      {data?.slice(0, 100).map((coin) =&gt; (        &lt;Coin key={coin.id}&gt;          &lt;Link to={`/${coin.id}`} state={{ name: coin.name }}&gt;              &lt;Img              src={`https://cryptocurrencyliveprices.com/img/${coin.id}.png`} alt=\"\"              /&gt;              {coin.name} &amp;rarr;            &lt;/Link&gt;          &lt;/Coin&gt;        ))      }    &lt;/CoinList&gt;  )}&lt;/Container&gt;  );};React Query 코드// src/api.tsconst BASE_URL = \"https://api.coinpaprika.com/v1\";export const fetchCoins = () =&gt; {  return fetch(`${BASE_URL}/coins`).then((res) =&gt; res.json());};// src/routes/Conins.tsxconst Coins = () =&gt; {const { isLoading, data } = useQuery&lt;ICoin[]&gt;('allCoins', fetchCoins);// isLoading: boolean값으로 반환// data: api 통신으로 받아온 data를 반환// allCoins: 고유한 값 지정// fetchCoins: api라는 파일을 따로 만든 후 그곳에서 해당 api 통신을 진행 한 함수를 등록&lt;Container&gt;  &lt;Header&gt;    &lt;Title&gt;코인&lt;/Title&gt;  &lt;/Header&gt;  {isLoading ? ( // isLoading의 boolean 값을 보고 화면 rander 결정    &lt;Loader&gt;loading...&lt;/Loader&gt;    ) : (    &lt;CoinList&gt;      // 받아온 data를 뿌려주는 과정      {data?.slice(0, 100).map((coin) =&gt; (        &lt;Coin key={coin.id}&gt;          &lt;Link to={`/${coin.id}`} state={{ name: coin.name }}&gt;            &lt;Img            src={`https://cryptocurrencyliveprices.com/img/${coin.id}.png`} alt=\"\"            /&gt;            {coin.name} &amp;rarr;          &lt;/Link&gt;        &lt;/Coin&gt;        ))      }    &lt;/CoinList&gt;    )}&lt;/Container&gt;  );};api 통신을 2번 해야하는 상황// src/api.tsconst BASE_URL = \"https://api.coinpaprika.com/v1\";export const fetchCoinInfo = (coinId: string) =&gt; {return fetch(`${BASE_URL}/coins/${coinId}`).then((res) =&gt; res.json());};export const fetchCoinTickers = (coinId: string) =&gt; {return fetch(`${BASE_URL}/tichers/${coinId}`).then((res) =&gt; res.json());};// src/routes/coin.tsxconst Coin = () =&gt; {  const { isLoading: infoLoading, data: infoData } = useQuery&lt;InfoData&gt;(      [\"info\", coinId],      () =&gt; fetchCoinInfo(coinId)    );  const { isLoading: tickersLoading, data: tickersData } = useQuery&lt;PriceData&gt;(      [\"tickers\", coinId],      () =&gt; fetchCoinTickers(coinId)    );// isLoading, data의 이름이 중복되기 때문에 각각의 고유한 이름으로 설정// [\"info\", coinId] -&gt; 고유한 값 설정 부분에서도 coinId가 중복되기 때문에 고유한 값을 같이 설정// 함수 등록 과정에서도 해당 함수에 coinId라는 인수가 필요하여 함수 자체를 설정const loading = infoLoading || tickersLoading; // infoLoading, tickersLoading이둘 다 true가 나올때만 실행사용 후기  사용성: 사용성 측면에서 굉장히 편한 사용 방법과 코드의 양을 줄여줄 수 있었다. 상태관리가 따로 필요하지 않고isLoading이라는 boolean값을 반환하기 때문에 통신에 따라 화면 설정 과정에서도 편리했다  성능: 성능 또한 받아온 data를 cashing하는 기능이 있기 때문에 재렌더링 시 통신이 일어나지 않아성능 상으로도 뛰어나다고 생각한다.  api 통신에서 React Query를 적극 활용할 생각이다."
  },
  
  {
    "title": "[Git] Git 명령어 정리",
    "url": "/posts/git%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%A0%95%EB%A6%AC/",
    "categories": "Development, Git",
    "tags": "git",
    "date": "2024-02-22 17:30:00 +0900",
    





    
    "snippet": "git merge 3가지 방법  3-way merge브랜치 각각(ex: main branch와 dev branch)에 신규 commit이 1회 이상 있는 경우 merge를 하게 되면 두 branch 코드가 합쳐져서 main branch에 새로운 commit이 생성되는 것.  fast-forwordmain branch에는 새로운 commit이 없고 de...",
    "content": "git merge 3가지 방법  3-way merge브랜치 각각(ex: main branch와 dev branch)에 신규 commit이 1회 이상 있는 경우 merge를 하게 되면 두 branch 코드가 합쳐져서 main branch에 새로운 commit이 생성되는 것.  fast-forwordmain branch에는 새로운 commit이 없고 dev branch(만든 branch)에만 새로운 commit이 있는 경우 dev branch를 main branch라고 선언하게 된다. 즉, 분기가 없어지고 main에서 새로운commit이 생성된 것과 같은 현상이 발생.      rebase &amp; mergerebase를 이용해서 신규 branch의 시작점을 main branch의 최근 commit으로 옮긴 다음 fast-forword merge 하는 방법.    revbase &amp; merge 하는 이유\t1. 3-way-merge 말고 강제로 fast-forword merge 하고 싶은 경우\t2. commit 내역을 한 줄로 계속 이어서 남기고 싶은 경우사용 방법\t1. 새로운 branch 이동\t2. `git rebase main` 명령어 사용\t3. main branch에서 fast-forword merge      코드 되돌리기      git restore [파일명]최근 commit된 상태로 현재 파일의 수정내역을 되돌린다.        git restore –source [commit아이디] [파일명] 입력한 파일이 특정 commit 아이디 시점으로 되돌아 간다.        git resotre –staged [파일명] 특정 파일을 staging 취소.        git revert [commit아이디]    kl2j32k c작업lkljlk4 b작업lk34j33 a작업              예를 들어 위와 같은 commit 내역이 있는 경우 b작업 내역을 지우고 싶다면git revert [commit아이디] 명령어로 b작업 취소 -&gt; c작업에는 영향 없음.      그냥 최근 commit 내역을 삭제하고 싶다면 git revert HEAD            git reset –hard [commit아이디]          git reset --hard [commit아이디] 명령어는 협업시 사용하지 않는 것이 좋다.      다른 개발자의 작업까지 취소해버리는 위험한 명령어      그래서 짧은 commit내역으로 돌아가거나 혼자 작업할 경우 유용함            git reset –soft [commit아이디]reset를 하긴하는데 hard 옵션과 같이 전부 삭제하는 것이 아닌 해당 commit이 staging 형태로 남아 있음        git reset –mixed [commit아이디]reset를 하는데 해당 commit 했던 내역이 staging 형태도 아닌 수정된 상태에서 남아 있음 -&gt; git add전 상태  원격저장소 관련  원격저장소에서 repository 생성 후 로컬과 연결          원격저장소에서 새로운 repository 생성      git init : 작업 폴더에 로컬 git repository 생성      git branch -M main : main branch이름을 main으로 지정      git push -u [원격저장소주소] main : 원격저장소에 push      git remote add origin [원격저장소주소] : 원격저장소 주소를 매번 쓰기 귀찮으니 origin이라는 변수명에 담는 과정      .gitignore      원격저장소에 올리고 싶지 않은 파일을 .gitignore에 입력하면 원격 저장소에 안올라간다.      보통 node_modules 나 .env 파일은 올리지 않음      git branch 전략 2가지      git flow          main : main branch      develop : main에서 merge를 바로 해버리면 위험하다고 판단하여 develop branch를 생성하여 확인 후 main에 merge      feature : develop branch에서 기능 단위로 개발할 경우 feature branch를 생성하여 기능 개발 후 develop branch로 merg      release : main branch에 merge하기 전 release branch에서 QA나 여러가지 테스트 진행      hotfix : 긴급하게 수정해야 되는 경우 hotfix branch를 생성하여 작업 후 merge            Trunk-Based          main branch에서 기능 개발 branch인 feature branch를 생성하거나 hotfix branch를 생성하여 완료되면 main branch에 바로 merge      이 전략은 테스트 자동화나 철저한 코드리뷰가 바탕이 되었을 경우 진행      아니면, 초반에는 git flow 전략으로 개발을 진행하다가 어느정도 안정화가 이루어 진 후trunk-based 전략으로 변경하는 것도 좋은 방법      코드 임시 보관      git stash          방금 작성한 코드가 임시 저장된다      staging 된 것이든 안 된 것이든 임시 저장됨      git stash save 'message' 메시지와 같이 임시 저장      stash 목록이 많은 경우 찾기 좋음            git stash list          git stash한 리스트 목록 확인            git stash pop          최근 stash한 코드를 불러온다      당연히 겹치는 코드가 있다면 conflict가 발생            git stash drop [삭제할 id]          git stash 목록에서 원하는 목록 삭제      삭제할 id는 git stash list 하면 보이는 아이디(ex: 0,1,2 등등)      "
  }
  
]

